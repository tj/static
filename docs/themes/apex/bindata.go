// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x70\xf0\x07\x92\xcd\x12\x24\x27\x4e\x5d\x05\x08\xd6\xb5\x09\xba\x87\x6e\xc5\xb2\x62\x7b\xa5\xa4\x63\x8b\x0b\x45\x0a\x24\x95\xd8\x1d\xf2\xdd\x07\xde\x64\xca\x96\x53\x14\x79\x88\x74\x78\xae\xbf\x73\xa3\x5c\x48\x21\x34\xfc\x6f\x06\x90\x24\x48\x14\x16\x50\xf5\x25\xad\x92\x12\x7f\x52\x94\x97\xe9\x7a\xb9\x80\x6c\x01\x69\xbe\x5c\x40\x7e\x75\x67\xf9\x5e\x69\xad\x9b\x02\xd6\x59\xd6\xed\x1c\xa5\x41\x52\xa3\x4c\x1a\xa4\xdb\x46\x17\x70\xe3\x4e\xec\x91\x96\xa4\x7a\xa6\x7c\x5b\x40\x96\x66\x2b\x89\xed\xdd\x88\x9c\xb4\x58\xd3\xbe\x35\xa7\x13\x87\x8c\xc8\x2d\x9a\xb3\xb5\x3d\xb3\x87\x35\x91\xcf\x05\x5c\x64\x59\xe6\x98\x4b\xd6\x63\x01\x17\xd7\xd7\x9f\x3e\x3e\x3e\x3a\x12\x33\x6e\x24\x5b\x49\xf6\x05\x5c\x6c\x88\xf9\xf3\xc2\xe5\xd6\x50\x36\x1b\xc7\xb7\x31\x6f\xeb\xdb\xf5\xc3\xc7\xdb\x40\x08\xea\x97\xf9\x72\xb5\xfc\xe8\xa5\x14\x32\xac\x34\x15\xdc\xca\xbf\x10\x79\xe9\xcc\x7a\x3c\x0e\xc7\x46\xe1\x6b\x43\x35\xde\xcd\xde\x66\xb3\x3f\x59\x5c\x4b\xb1\x4b\x14\xfd\x69\x21\x28\x85\x34\x38\x95\x62\x67\x19\x1a\xdd\xb2\x05\x94\xa2\xde\x5b\xce\x8d\xe0\x3a\xd9\x90\x96\xb2\x7d\x01\x09\xe9\x3a\x86\x89\xda\x2b\x8d\xed\x02\xfe\xca\x28\x7f\xfe\x46\xaa\x27\xfb\xfe\x28\xb8\x5e\xcc\x00\x00\xe6\x4f\xb8\x15\x08\x3f\xfe\x36\x5f\xc0\xfc\x9f\xa2\x14\x5a\x98\xa7\x7f\xec\xf6\x5b\xe4\x73\xcf\xf3\xa3\xec\xb9\xee\x0d\xfd\x33\xe1\x9a\x48\x64\xcc\xbc\x3c\x52\x49\xe0\x89\x70\x15\xf8\xbe\x48\x41\x6b\x4f\x81\xf9\x57\x64\x2f\xa8\x69\x45\xe0\xef\xd8\xe3\x7c\x01\x8a\x70\x95\x28\x94\xd4\xc1\xf7\x8a\xe5\x33\xd5\x89\xf5\x5a\xb5\x42\xe8\xc6\xc6\x48\xb8\xa6\x84\x51\xa2\xb0\xbe\x0b\x41\x29\xfa\x13\x0b\xc8\x6f\x5d\xbd\x58\xd2\xab\xaf\x95\x6b\x97\xc7\x92\x54\xcf\x5b\x29\x7a\x5e\x0f\x00\x6f\x2d\xbc\x95\x60\x42\x06\x9a\xcf\x8f\x3d\x60\x94\xe3\x50\x71\xb9\xa1\xb4\x44\x6e\x29\x2f\xc0\x2a\xec\x48\x5d\xbb\xb2\xb3\x50\x17\xc5\x90\x25\x97\x95\x13\x7b\x71\x92\x4f\x2d\xc7\x39\xbe\x72\xc9\xcb\x17\xd0\x2c\x17\xd0\x5c\x2f\xa0\xb9\xb1\x4a\x9d\x03\x89\x16\x5d\x01\x1f\x56\x2e\x58\x4f\x2b\x85\xd6\xa2\xf5\xbe\xc5\x98\xa4\x4b\x5f\xf6\x23\x54\x6e\x1d\x2a\xe3\x18\x87\x0e\x39\x83\x89\x75\xea\xc4\x91\x53\x8b\x4e\x8d\xe3\xfe\x33\x74\x87\xda\x1b\x33\x9c\x98\xbf\xb5\x42\xc4\xf2\x7b\x17\x28\x6f\x50\x52\x6d\x98\x35\xee\x74\x52\x63\x25\x24\x31\x38\x15\xc0\x05\x77\x7d\xd0\x45\x3e\x15\xb0\x5c\x75\x3b\x98\x8a\xee\x76\x2a\x34\xfb\xee\x1a\xda\x45\xc8\x28\x28\x2d\x05\xdf\x2e\x66\x9d\x7f\x8a\x1d\x3a\xad\x93\x11\xae\xab\x2c\x0b\x5a\x88\x51\x40\x7e\x43\xf6\x26\x8b\x0b\x6b\xc8\xe8\xb5\xcb\xf3\xd0\xda\x8e\x9a\x77\x3b\xa8\x85\xd6\x58\xc3\x45\x5d\xd7\x83\xd1\xa2\x11\x2f\x28\xad\x69\xf7\x78\xea\xc0\x30\x59\x8e\x54\x46\x78\xc6\xb2\x23\xae\x64\xa4\xc9\xbe\x38\xd8\x7a\x36\x4a\xc2\x2a\x33\x49\x70\xff\xae\xfd\x18\x3f\xea\x98\x9e\xc1\x91\x50\xee\x84\xf2\x83\x90\x63\x63\x74\xac\x3b\xe4\xf7\xfd\x5c\x9e\x56\xb7\xaf\x4a\xa7\xf1\x9d\xd4\x86\xb0\xce\xe4\xb6\x93\x78\xa6\xc5\x0f\x7b\xe1\xb4\xc1\x87\x9c\x0f\x30\x04\x5c\x3c\xc0\x92\xd4\xb4\x57\x05\x2c\x1d\xd5\xe0\xbf\x61\xe2\xb5\x00\xd2\x6b\x11\x9c\x29\x60\xfe\x24\x7a\x59\x21\x7c\x16\x35\xc2\x77\x69\xa6\xf1\x37\xe4\x4c\x2c\xa0\x15\x5c\xa8\x8e\x54\x78\xd4\x90\xe9\x7a\xb2\xdb\x02\x1c\x8c\xc2\x3d\x54\xa2\x46\x53\x34\xee\x29\xca\xbb\xab\x34\x25\x18\xad\xe1\xe2\xcb\xc3\xc3\xf2\xe1\xf6\x48\x7d\x96\x7e\x08\xfd\x7c\x08\xad\xdb\xd9\x34\x4e\x84\xe7\xcb\xd9\x6e\xb1\xc4\xba\x6b\x2a\xef\x55\x92\xee\xdc\x90\x1a\xad\xad\x61\x20\xbc\xcd\x66\x35\x6a\x42\x99\x82\x7b\x50\x7d\xdb\x12\xe9\xb6\x5c\xd5\x4b\x65\x60\xef\x04\xe5\x1a\xa5\xc5\xb2\xd7\x26\xf8\x50\xe2\x00\xbd\x42\xe9\x47\x6e\x54\xf7\x07\x7d\x5d\x5c\xf9\x0c\x37\xda\x85\xe4\x60\x98\xce\xa7\x67\xcb\x57\xbe\x6e\xd3\x7f\x4b\xd2\x75\xbe\x87\x6a\xaa\x3a\x66\x6e\x0b\x1b\x86\x36\xfc\xff\xf6\x4a\xd3\xcd\x3e\xa9\x04\xd7\x68\xd2\x5a\xa1\x73\xd6\x48\x7e\x16\x5c\x13\xca\xbd\xac\xbf\x0d\x39\xab\xf6\xc5\x9a\x3d\x51\x69\xfe\x27\x35\x95\x6e\x8d\x14\xa6\xfa\xfa\x96\x1f\x34\xa2\x41\xf6\xbc\x4f\x86\xed\xab\xbd\x66\xfd\xa6\xc7\x00\x84\xd1\x2d\x4f\xa8\xc6\x56\xc5\xe4\x50\x6a\xce\xf3\xd1\x15\xce\xcd\x8c\xf4\x89\xd6\x58\x12\x67\xd0\xd8\x29\x20\x87\xdc\xd7\x7b\xe4\x76\x0c\xc3\x87\xd5\x1f\xe3\x33\xda\x6e\xfd\x74\xd8\x85\x8b\x63\x9e\x65\x9e\xe9\x1b\xf2\xde\x9e\x76\x42\x51\x07\x4b\xb8\x56\x28\x4d\xab\xe7\xfd\xdd\xe8\xec\x40\xb3\x9b\x6d\xe5\x2b\xf8\xfc\x3a\x74\x06\xee\x21\x35\xc1\x3b\x43\x47\xd3\xfb\x50\x0f\x23\xd6\x7b\xbf\x19\x0e\xb6\x25\x32\xa2\xe9\xcb\xb9\xf2\x9c\xde\x15\x5a\x12\x1e\x14\x58\x2f\x61\x99\x65\xad\x9a\x70\x7a\xca\xdf\x7b\x20\x29\xa9\x8c\xd1\xf7\xb6\xd4\x94\x58\x51\xe2\x46\xc8\x20\xe6\x0b\x62\x3e\x1f\xa3\x49\x4a\x25\x58\xaf\xad\xf3\xa3\xcc\x1c\x4a\x23\x0f\x23\xc2\x81\x95\xf8\x3b\x8d\x6b\xa5\xa3\x7b\x5b\x72\x76\x8b\xbe\x50\x45\x4b\xca\xa8\xde\x17\xd0\xd0\xba\x46\x3e\x60\xb3\x11\xb2\x2d\x40\x55\x84\xe1\x7f\x2e\xb3\xab\x11\x3d\x11\x92\xda\x85\x62\xcc\x45\x75\x1b\x83\x4a\x18\x83\xe5\x2a\x6b\x95\x37\x6b\x3e\x61\xce\x61\x72\x66\xdd\xfe\x02\x49\x2b\x15\xe3\x19\x47\x63\x9f\x19\x4e\x87\x93\x7b\x95\xdf\xc9\x16\x4f\x6e\x65\x79\x36\xde\xba\x49\x54\xd1\x41\xa8\xd8\x50\xa9\x74\x52\x35\x94\xd5\xd3\xd7\xba\x91\xb0\xdb\x7e\xe9\xbf\xa8\x66\x38\xbd\x90\x47\x1b\x66\x99\x2e\xfd\x86\x71\x22\xa9\x43\x38\x36\xe4\xf2\x1c\xf6\x9b\x27\x4a\x27\x1e\xa8\xf6\xda\x67\x27\x4c\x3c\x5b\xa2\x6e\x5f\x65\x43\x50\xce\x8e\xd3\x13\xdb\x09\xf5\xb5\x1e\x73\x9a\xc5\xd1\x11\x3e\x9e\x77\x25\x13\xd5\x73\xcc\x94\xaa\xbe\x34\x4e\x9c\xbf\x2a\x44\x57\x8e\xd1\x5e\x5c\xfb\xb5\x68\x43\x88\xf2\xd7\x9b\x19\x5c\x11\x85\xa3\x39\x3e\xac\xa1\x60\x77\x30\xca\x50\x6b\x33\x10\x3a\x52\xd9\xed\xea\xac\x87\x8f\xd8\xab\x5f\x9a\x18\x4d\x8e\x52\xb0\xe9\xef\xa6\x03\x80\xaa\x35\x65\x7f\xb0\x1f\xb3\xde\xb8\xaa\x3a\xb6\x17\x86\xd4\xb1\xab\x5c\xc8\x96\xb0\xd3\xda\x08\x5f\x08\xe9\x27\x5e\x35\x42\xbe\x33\x0b\x47\xa5\x92\x04\xfb\xc2\x18\x30\x1d\x92\xa5\xf9\x6a\x04\x23\xe5\xd6\x92\x4f\xe3\x61\xf2\x78\xc1\x61\xf2\xdc\x84\x98\xbd\x07\xea\x65\x7b\xe4\x45\x3c\xbf\x7c\x51\xfa\xf9\x14\xb7\x43\x24\xde\x11\xdd\x78\x1d\xf6\xea\x91\xe0\x0b\x72\xad\xec\x14\x89\x78\xa3\x41\x31\x84\x91\x3b\x65\x8f\x42\x84\x16\x19\x1c\x1d\xca\xfb\x2f\x2d\xd6\x94\x80\xaa\x24\x22\x07\xc2\x6b\xb8\x8c\xda\x60\x6d\x7a\xfb\xca\x89\x8e\x3f\xfb\x27\x7e\x40\xb9\x0e\xd3\x61\xf4\x73\xcb\x1f\x8e\x32\x91\xee\xb7\xd9\x0c\x60\xf2\x16\x31\x71\x53\x38\x7f\x15\x09\x8a\xe2\xbd\x7f\xd2\xa4\xe1\x5a\x3c\xb2\xe9\x59\x8f\xd6\xc8\xdb\xec\x6d\xf6\xff\x00\x00\x00\xff\xff\x44\xfa\x2f\xbf\x61\x12\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 4705, mode: os.FileMode(420), modTime: time.Unix(1512932009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xf5\x29\xce\x9b\xe5\x74\xb8\x7d\xef\x52\x68\x4b\x1f\x06\x1b\x8c\xe5\xb1\x14\xe2\xca\xd7\xf6\x25\xf2\x55\x26\x5d\x27\x84\xd1\xef\x3e\x2c\xbb\xeb\x56\x32\xfa\x20\x30\xf8\x77\x74\xfe\xe8\x72\xb5\x32\x58\x61\x43\x3a\xee\x2b\x83\xd5\xa5\x31\x2e\x48\x52\xb0\xd2\x90\xb0\x46\x13\xdc\x38\x90\x68\xf5\x73\xa4\x78\xda\x90\x27\xa7\x21\xde\x7a\x6f\x8b\xea\x7b\xdd\x51\x51\x2e\x02\xcf\xb2\xfb\x48\xf0\x8d\x64\x44\x5d\x94\xc6\x2c\xbe\xf7\x3d\xb9\x1d\xb8\xc5\x96\xfc\x16\x9c\x10\x46\x9d\x4f\x8b\x03\xd3\x71\x89\xd4\x8e\xe2\x94\x83\x80\xd3\x1d\xf9\x70\xdc\xb8\x18\xbc\xb7\xe4\x4b\xfc\x32\x40\x24\x1d\xa3\x80\x7c\xd5\x91\xde\x85\x51\x1a\x96\xee\xde\x33\x89\xfe\x20\xa7\xb6\xac\x9e\x83\x6a\x18\x70\x83\x2b\xf3\xf2\xc7\xfc\xd6\x29\x1f\x6a\xa5\xdc\x15\x5b\xde\xbe\x77\xab\x17\xe0\x8b\xd2\x60\x79\xf6\xca\x35\xab\x36\xc4\x87\xda\xf5\x96\xb0\xbe\x01\x55\xce\xd7\x29\x7d\xe5\xa4\x55\xa4\x21\x1c\xc8\x16\x59\x4a\x45\x59\xbe\x4a\x1e\xf9\xe9\x2f\xac\x6e\x9a\x37\xe6\x5c\x24\xed\x09\x2e\xc4\x48\x4e\x31\x4c\xab\xe5\x8c\x6d\x88\xd3\x9f\x89\x74\x41\x94\x44\x13\x58\x32\x3c\xad\xb5\x0f\x51\xff\xd7\xc1\x2e\xf1\x49\xc1\x58\xe3\xca\x18\xe4\xeb\xec\x35\x18\x9f\xe7\xe7\xae\x3c\x49\xa7\xfd\x35\xf8\xe2\x62\xc6\x31\xbd\x8d\xfd\x77\xf5\x8c\x3e\xf2\x53\xf9\x8a\x00\xcf\x91\xea\x5d\xfe\x7e\x31\xd3\x31\x78\xbf\xdd\xb9\x8e\x29\xdf\x87\xb4\x3f\x41\x7b\x96\xee\xb4\x64\x3f\xb2\x34\xe1\x38\x6d\xf4\x70\x20\xd1\x69\x30\x12\x8a\xb6\x98\x05\xc5\x27\xe4\xd9\xdf\x9a\x95\xe6\x77\x00\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1512387086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x8e\xdb\x20\x14\xbc\xf7\x2b\x5e\xe9\xb5\x8e\x95\x5b\x0f\xb0\x97\xb4\x55\x2f\x55\x57\xda\x95\xaa\x1e\x09\xbc\x0d\x6c\x31\x76\xcd\xb3\x93\x95\xeb\x7f\xaf\x6c\xc7\x15\xe0\x68\xf7\x14\xd0\xcc\x3c\xcf\x0c\x10\xfe\xfe\xf3\x8f\xc3\xe3\xaf\xfb\x2f\x60\xa8\x72\x77\xef\xf8\xf2\x03\xc0\x0d\x4a\x3d\x2d\x00\x78\x85\x24\x41\x19\xd9\x06\x24\xc1\x3a\x7a\x2a\x3e\xb1\x18\x32\x44\x4d\x81\x7f\x3a\xdb\x0b\x76\x29\x3a\x59\xa8\xba\x6a\x24\xd9\xa3\x43\x06\xaa\xf6\x84\x9e\x04\xb3\x28\x50\x9f\x30\x51\x7a\x59\xa1\x60\xbd\xc5\x73\x53\xb7\x14\x91\xcf\x56\x93\x11\x1a\x7b\xab\xb0\x98\x37\x1f\xc1\x7a\x4b\x56\xba\x22\x28\xe9\x50\xec\xd7\x41\x64\xc9\xe1\xdd\x30\xec\x1e\xa7\xc5\x38\xc2\x5f\x18\x86\xdd\x43\x77\xa4\x65\xcf\xcb\x85\xb1\xb0\x9d\xf5\xbf\xa1\x45\x27\x58\xa0\x17\x87\xc1\x20\x12\x03\xd3\xe2\x93\x60\x64\xb0\xc2\x52\x36\x78\x29\x55\x08\xa5\xf5\x1a\x2f\x3b\x15\xc2\xfc\x25\x5e\xae\x8d\xf0\x63\xad\x5f\xae\xe3\xb4\xed\x41\x39\x19\x82\x60\x3f\x5b\xd9\x34\xd8\x5e\x6d\xa5\xd8\xa1\xf6\x24\xad\x8f\xd0\x14\xff\x86\x52\x27\x60\x0a\xcf\xc9\x40\xa1\xa7\x8c\x04\xc0\x43\x23\xfd\xca\x23\xbc\x10\x8b\xaa\xe0\xe5\x84\xbe\x22\x08\xdd\xf1\xbf\x26\x6e\x2c\x97\xf1\x52\xdb\x3e\xb2\xbe\x6c\x6f\x46\x39\x2c\x47\x58\x9c\xb3\x3a\x72\xde\x83\xd5\x78\x94\x9b\x38\x11\xe3\x3b\xfa\x2e\x83\x01\x86\xa1\x95\xfe\x84\xb0\xbb\x97\x27\x0c\xe3\x98\xc1\xe9\x04\x4b\x58\x6d\x26\xcc\x24\x79\x3d\xf2\x0f\x53\x70\xd7\x9d\xc6\x31\xed\x4d\x6e\x55\x59\x07\xab\x1d\xf4\x3a\x73\xb1\x21\xe6\x75\xdd\x2c\x2c\xf3\xf9\x46\xce\x78\xc0\xc4\x60\x60\xb5\x60\x51\x98\xad\x7d\xb3\x4f\x12\x9a\xfd\x96\x33\x0c\xbb\xab\x9b\xed\x07\xb7\xe9\x6f\x66\x8f\x7c\x7d\xad\xeb\xf9\xbe\xde\x90\xf2\xa0\x5a\xdb\x10\x84\x56\x25\xcf\xee\x79\x7d\x75\xcf\x61\xd2\x2d\xac\xb7\x2f\x62\xb2\xe4\xe5\xf2\x3e\x79\xb9\xfc\x97\xfd\x0b\x00\x00\xff\xff\xa5\x5c\xdd\x8c\xe3\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1512386825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

